-- 
-- Script was generated by Devart dbForge Studio 2019 for MySQL, Version 8.2.23.0
-- Product Home Page: http://www.devart.com/dbforge/mysql/studio
-- Script date 5/5/2021 4:23:36 PM
-- Server version: 10.1.47
-- Run this script against MF775_VVAn_Test to synchronize it with MF775_VVAn_AMIS
-- 

--
-- Disable foreign keys
--
/*!40014 SET @OLD_FOREIGN_KEY_CHECKS=@@FOREIGN_KEY_CHECKS, FOREIGN_KEY_CHECKS=0 */;

--
-- Set default database
--
USE MF775_VVAn_Test;

--
-- Create table `Position`
--
CREATE TABLE `Position` (
  PositionId CHAR(36) NOT NULL,
  PositionName VARCHAR(255) NOT NULL,
  PositionParentId CHAR(36) DEFAULT NULL,
  CreatedDate DATE DEFAULT NULL,
  CreatedBy VARCHAR(100) DEFAULT NULL,
  ModifiedDate DATE DEFAULT NULL,
  ModifiedBy VARCHAR(100) DEFAULT NULL
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci;

--
-- Create index `UK_Position_PositionId` on table `Position`
--
ALTER TABLE `Position` 
  ADD UNIQUE INDEX UK_Position_PositionId(PositionId);

DELIMITER $$

--
-- Create procedure `Proc_UpdatePosition`
--
CREATE PROCEDURE Proc_UpdatePosition(IN PositionId char(36), IN PositionName varchar(255), IN PositionParentId char(36))
BEGIN
  UPDATE `Position` p
  SET p.PositionName = PositionName,
      p.PositionParentId = PositionParentId,
      p.ModifiedDate = CURRENT_TIMESTAMP()
  WHERE p.PositionId = PositionId;
END
$$

--
-- Create procedure `Proc_InsertPosition`
--
CREATE PROCEDURE Proc_InsertPosition(IN PositionId CHAR(36), IN PositionName VARCHAR(255), IN PositionParentId CHAR(36))
BEGIN
  INSERT `Position`(PositionId, PositionName, PositionParentId, CreatedDate)
  VALUES(PositionId,
      PositionName,
      PositionParentId,
      CURRENT_TIMESTAMP()
  );
END
$$

--
-- Create procedure `Proc_GetPositions`
--
CREATE PROCEDURE Proc_GetPositions()
BEGIN
  SELECT p.PositionId, p.PositionName, p.PositionParentId, p.CreatedDate FROM `Position` p;
END
$$

--
-- Create procedure `Proc_GetPositionParentId`
--
CREATE PROCEDURE Proc_GetPositionParentId(IN PositionId CHAR(36))
BEGIN
  SELECT p.PositionId FROM `Position` p WHERE p.PositionParentId = PositionId;
END
$$

--
-- Create procedure `Proc_GetPositionById`
--
CREATE PROCEDURE Proc_GetPositionById(IN PositionId CHAR(36))
BEGIN
  SELECT p.PositionId, p.PositionName, p.PositionParentId FROM `Position` p WHERE p.PositionId = PositionId;
END
$$

--
-- Create procedure `Proc_GetListPositionById`
--
CREATE PROCEDURE Proc_GetListPositionById(IN PositionId char(36), OUT PositionName varchar(100))
BEGIN
  SET PositionName = (SELECT
      p.PositionName
    FROM `Position` p
    WHERE p.PositionId = PositionId LIMIT 1);
  SELECT
    p.PositionId AS Value,
    p.PositionName AS Text
  FROM `Position` p
  WHERE p.PositionParentId = PositionId;
END
$$

--
-- Create procedure `Proc_DeletePosition`
--
CREATE PROCEDURE Proc_DeletePosition(IN PositionId CHAR(36))
BEGIN
  DELETE FROM User WHERE User.PositionId = PositionId;
  DELETE FROM `Position` WHERE `Position`.PositionId = PositionId;
END
$$

DELIMITER ;

--
-- Create table `User`
--
CREATE TABLE User (
  UserId CHAR(36) NOT NULL,
  UserName VARCHAR(100) NOT NULL DEFAULT '',
  Password VARCHAR(255) NOT NULL DEFAULT '',
  PositionId CHAR(36) DEFAULT NULL,
  RoleName VARCHAR(100) NOT NULL DEFAULT '',
  CreatedDate DATE DEFAULT NULL,
  CreatedBy VARCHAR(100) DEFAULT NULL,
  ModifiedDate DATE DEFAULT NULL,
  ModifiedBy VARCHAR(100) DEFAULT NULL,
  PRIMARY KEY (UserId)
)
ENGINE = INNODB,
CHARACTER SET utf8mb4,
COLLATE utf8mb4_general_ci;

--
-- Create foreign key
--
ALTER TABLE User 
  ADD CONSTRAINT FK_User_PositionId FOREIGN KEY (PositionId)
    REFERENCES `Position`(PositionId) ON DELETE CASCADE ON UPDATE NO ACTION;

DELIMITER $$

--
-- Create procedure `Proc_UpdateUser`
--
CREATE PROCEDURE Proc_UpdateUser(IN UserId CHAR(36), IN UserName VARCHAR(100), IN PositionId CHAR(36))
BEGIN
  UPDATE User c SET 
  c.UserName = UserName, 
  c.PositionId = PositionId,
  c.ModifiedDate = CURRENT_TIMESTAMP()
  WHERE c.UserId = UserId;
END
$$

--
-- Create procedure `Proc_InsertUser`
--
CREATE PROCEDURE Proc_InsertUser(IN UserId CHAR(36), IN UserName VARCHAR(100), 
  IN Password VARCHAR(255), IN PositionId CHAR(36))
BEGIN
  INSERT User (UserId, UserName, Password, PositionId, RoleName, CreatedDate)
  VALUES (UserId, 
    UserName, 
    Password, 
    PositionId, 
    'USER',
  CURRENT_TIMESTAMP());
END
$$

--
-- Create procedure `Proc_GetUsersByPositionId`
--
CREATE PROCEDURE Proc_GetUsersByPositionId(IN PositionId char(36))
BEGIN
  SELECT u.UserId, u.UserName, u.PositionId FROM User u WHERE u.PositionId = PositionId;
END
$$

--
-- Create procedure `Proc_GetUsers`
--
CREATE PROCEDURE Proc_GetUsers()
BEGIN
  SELECT u.UserId, u.PositionId, u.Password,
       u.UserName, u.RoleName FROM User AS u;
END
$$

--
-- Create procedure `Proc_GetUserById`
--
CREATE PROCEDURE Proc_GetUserById(IN UserId CHAR(36))
BEGIN
  SELECT * FROM User c WHERE c.UserId = UserId LIMIT 1;
END
$$

--
-- Create procedure `Proc_DeleteUser`
--
CREATE PROCEDURE Proc_DeleteUser(IN UserId CHAR(36))
BEGIN
  DELETE FROM User WHERE User.UserId = UserId;
END
$$

--
-- Create procedure `Proc_Authenticate`
--
CREATE PROCEDURE Proc_Authenticate(IN UserName varchar(100))
BEGIN
  SELECT * FROM User u WHERE u.UserName = UserName;
END
$$

DELIMITER ;

--
-- Enable foreign keys
--
/*!40014 SET FOREIGN_KEY_CHECKS=@OLD_FOREIGN_KEY_CHECKS */;